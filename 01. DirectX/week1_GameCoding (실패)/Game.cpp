#include "pch.h"
#include "Game.h"

Game::Game()
{
}

Game::~Game()
{
}

void Game::Init(HWND hwnd)
{
	_hwnd = hwnd;
	_width = GWinSizeX;
	_height = GWinSizeY;

	CreateDeviceAndSwapChain();
	CreateRenderTargetView();
	SetViewport();

	CreateGeometry();
	CreateVS();
	CreateInputLayout();
	CreatePS();
}

void Game::Update()
{
}

void Game::Render()
{
	// 렌더 단계 : IA - VS - RS - PS - OM
	RenderBegin(); // 그릴 준비 (도화지 초기화 등)

	// >> 그리기 로직
	{
		uint32 stride = sizeof(Vertex);
		uint32 offset = 0;

		// IA
		_deviceContext->IASetVertexBuffers(0, 1, _vertexBuffer.GetAddressOf(), &stride, &offset);
		_deviceContext->IASetInputLayout(_inputLayout.Get());
		_deviceContext->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

		// VS
		_deviceContext->VSSetShader(_vertexShader.Get(), nullptr, 0);

		// RS


		// PS
		_deviceContext->PSSetShader(_pixelShader.Get(), nullptr, 0);

		// OM
		_deviceContext->Draw(_vertices.size(), 0);
	}


	RenderEnd(); //그림 끝
}

void Game::RenderBegin()
{
	// >> : 버퍼 색 초기화
	_deviceContext->OMSetRenderTargets(1, _renderTargetView.GetAddressOf(), nullptr); // OM : OutputMerger (마지막 단계)
	_deviceContext->ClearRenderTargetView(_renderTargetView.Get(), _clearColor);
	_deviceContext->RSSetViewports(1, &_viewport);
}

void Game::RenderEnd()
{
	HRESULT hr = _swapChain->Present(1, 0); // [중요] 완성된 백 버퍼를 전면 버퍼로 출력
	CHECK(hr);
}

void Game::CreateDeviceAndSwapChain()
{
	// >> : 스왑체인 (더블 버퍼링 세팅)
	DXGI_SWAP_CHAIN_DESC desc; //백버퍼(스왑체인)를 담는 버퍼 관리
	ZeroMemory(&desc, sizeof(desc)); //memeset과 동일한 기능 (0으로 초기화)
	{
		desc.BufferDesc.Width = _width;
		desc.BufferDesc.Height = _height;
		desc.BufferDesc.RefreshRate.Numerator = 60;
		desc.BufferDesc.RefreshRate.Denominator = 1;
		desc.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
		desc.BufferDesc.ScanlineOrdering = DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED;
		desc.BufferDesc.Scaling = DXGI_MODE_SCALING_UNSPECIFIED;
		desc.SampleDesc.Count = 1;
		desc.SampleDesc.Quality = 0; //멀티 샘플링과 관련 : 픽셀이 자연스럽지 못할때 (사선이 계단현상 등) 어떻게 할건지
		desc.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT; //버퍼 사용 용도
		desc.BufferCount = 1; // 버퍼 사용 개수
		desc.OutputWindow = _hwnd; // 윈도우 핸들
		desc.Windowed = true;
		desc.SwapEffect = DXGI_SWAP_EFFECT_DISCARD;
	}
	// << :

	HRESULT hr = ::D3D11CreateDeviceAndSwapChain(
		nullptr,
		D3D_DRIVER_TYPE_HARDWARE, //그래픽 카드를 사용, 만들고자 하는거에 따라 변경 (CPU도 같이 사용할건지)
		nullptr,
		0,
		nullptr,
		0,
		D3D11_SDK_VERSION,
		&desc,
		_swapChain.GetAddressOf(),// _device스마트 포인터라서 자체를 받으려면 .Get(), 주소를 받으려면 GetAddressOf()사용
		_device.GetAddressOf(),
		nullptr,
		_deviceContext.GetAddressOf()
	);

	CHECK(hr); //성공 여부 (define 참고, assert 사용)
	
}

void Game::CreateRenderTargetView()
{
	// >> : 후면 버퍼링에 그려달라는 거를 설정하는 함수
	HRESULT hr;

	ComPtr<ID3D11Texture2D> backBuffer = nullptr; //Texture : PNG 파일 같은거라고 생각
	hr = _swapChain->GetBuffer(0, _uuidof(ID3D11Texture2D), (void**)backBuffer.GetAddressOf());
	CHECK(hr);

	_device->CreateRenderTargetView(backBuffer.Get(), nullptr, _renderTargetView.GetAddressOf());
	CHECK(hr);

	//후면 버퍼를 backBuffer에 넣어주고 _renderTargetView에 넣어준 개념(?)

}

void Game::SetViewport()
{
	_viewport.TopLeftX = 0.0f;
	_viewport.TopLeftY = 0.0f;
	_viewport.Width = static_cast<float>(_width);
	_viewport.Height = static_cast<float>(_height);
	_viewport.MinDepth = 0.0f;
	_viewport.MaxDepth = 1.0f;
}

void Game::CreateGeometry()
{
	{ 
		//vertex 정보 기입
		_vertices.resize(3);

		_vertices[0].position = Vec3(-0.5f, -0.5f, 0.0f);
		_vertices[0].color = Color(1.0f, 0.0f, 0.0f, 1.0f);
		_vertices[1].position = Vec3(0.0f, 0.5f, 0.0f);
		_vertices[1].color = Color(0.0f, 1.0f, 0.0f, 1.0f);
		_vertices[2].position = Vec3(0.5f, -0.5, 0.0f);
		_vertices[2].color = Color(0.0f, 0.0f, 1.0f, 1.0f);
	}

	{
		//VertexBuffer
		D3D11_BUFFER_DESC desc; // 버퍼 생성 : GPU 버퍼에 저장할 수 있도록 설정
		ZeroMemory(&desc, sizeof(desc));
		desc.Usage = D3D11_USAGE_IMMUTABLE; //GPU가 ReadOnly데이터로 된다는 것. 다른 것들도 찾아볼것
		desc.BindFlags = D3D11_BIND_VERTEX_BUFFER;
		desc.ByteWidth = (uint32)(sizeof(Vertex) * _vertices.size());

		D3D11_SUBRESOURCE_DATA data;
		ZeroMemory(&data, sizeof(data));
		data.pSysMem = _vertices.data(); // 첫번째 데이터의 시작 주소 = &_vertices

		_device->CreateBuffer(&desc, &data, _vertexBuffer.GetAddressOf());
	}

}


void Game::CreateInputLayout()
{
	// GPU가 정보를 어떻게 읽을 것인지 설정 해주기

	D3D11_INPUT_ELEMENT_DESC layout[] =
	{
		{"POSITION",0,DXGI_FORMAT_R32G32B32_FLOAT,0,0, D3D11_INPUT_PER_VERTEX_DATA,0},
		{"COLOR",0,DXGI_FORMAT_R32G32B32_FLOAT,0,12, D3D11_INPUT_PER_VERTEX_DATA,0}, //12 : 첫 번째에서 부터 12번째 이후로 COLOR이 시작된다는 의미(POSITION은 R32,G32,B32로 각 4바이트씩 12바이트로 이후에 컬러가 시작된다고 보면됨
	};

	const int32 count = sizeof(layout) / sizeof(D3D11_INPUT_ELEMENT_DESC);
	_device->CreateInputLayout(layout, count, _vsBlob->GetBufferPointer(), _vsBlob->GetBufferSize(), _inputLayout.GetAddressOf());
}

void Game::CreateVS()
{
	LoadShaderFromFile(L"Default.hlsl", "main", "vs_5_0", _vsBlob);
	HRESULT hr = _device->CreateVertexShader(_vsBlob->GetBufferPointer(), _vsBlob->GetBufferSize(), nullptr, _vertexShader.GetAddressOf());

	CHECK(hr);

}

void Game::CreatePS()
{
	LoadShaderFromFile(L"Default.hlsl", "PS", "ps_5_0", _psBlob);
	HRESULT hr = _device->CreatePixelShader(_psBlob->GetBufferPointer(), _psBlob->GetBufferSize(), nullptr, _pixelShader.GetAddressOf());

	CHECK(hr);
}

void Game::LoadShaderFromFile(const wstring& path, const string& name, const string& version, ComPtr<ID3DBlob>& blob)
{
	const uint32 compileFlag = D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION;

	HRESULT hr = ::D3DCompileFromFile(
		path.c_str(),
		nullptr,
		D3D_COMPILE_STANDARD_FILE_INCLUDE,
		name.c_str(),
		version.c_str(),
		compileFlag,
		0,
		blob.GetAddressOf(),
		nullptr);

	CHECK(hr);
}
